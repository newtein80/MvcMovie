모델(Models):
응용 프로그램의 데이터를 표현하는 클래스로, 데이터에 업무 규칙을 적용하기 위한 유효성 검사 로직이 수행되는 곳이기도 합니다.
일반적으로 모델 개체는 데이터베이스를 이용해서 모델의 상태를 조회하거나 저장합니다.
가령 본 자습서에서는 Movie 모델을 이용해서 데이터베이스로부터 영화 데이터를 조회하고,
이 모델을 뷰에 전달하거나 변경합니다.
그리고 변경된 데이터는 SQL Server 데이터베이스에 저장됩니다.


Entity Framework Core라는 .NET 프레임워크의 데이터-접근 기술을 이용해서 필요한 데이터 모델 클래스를 정의하고 사용해볼 것입니다.
Entity Framework Core는 (EF Core라고 부르기도 합니다) Code First 라는 이름의 개발 패러다임을 그 특징으로 삼고 있습니다.
이 방식에서는 먼저 코드를 작성하면 그 코드를 기반으로 데이터베이스의 테이블들이 생성됩니다.
Code First를 사용하면 간단한 클래스들을 작성해서 데이터 모델 개체들을 생성할 수 있습니다.
(이런 클래스를 POCO 클래스라고 하는데, "Plain-Old CLR objects"의 약자입니다)
그러면 데이터베이스는 이 클래스들을 기반으로 자동으로 생성됩니다.

기본적으로 EF Core는 ID라는 이름을 가진 속성을 기본 키로 간주

MVC의 가장 기본적인 설계 원칙 중 한 가지는 "중복배제(DRY, Don't Repeat Yourself)"입니다.
ASP.NET MVC에서 권장하는 작업 방식은 기능이나 동작을 단 한 번만 지정하면 응용 프로그램 전반에 그 효과가 일괄적으로 반영되는 것입니다.
이런 방식을 사용하면 작성해야 할 코드의 양이 줄어들뿐만 아니라 코드 자체의 오류도 적어지고, 테스트가 쉬워지며, 유지보수도 용이해집니다.

MVC와 Entity Framework Code First가 지원해주는 유효성 검사 기능이 바로 중복배제 원칙의 좋은 실제 사례입니다.
모델 클래스 한 곳에서만 선언적 유효성 검사 규칙을 지정하면 응용 프로그램의 모든 곳에 선언된 규칙이 적용됩니다.

// 새로운 필드를 데이터베이스에 반영하기 전까지는 응용 프로그램을 실행할 수 없습니다. 지금 상태로 응용 프로그램을 실행하면 다음과 같이 SqlException 발생

/*
* 이 오류를 해결하기 위한 접근방법이 몇 가지 존재합니다:
* 1.
* Entity Framework가 새로운 모델 클래스의 스키마를 기반으로 자동으로 데이터베이스를 재생성하도록 구성할 수 있습니다.
* 이 방식은 모델과 데이터베이스 양쪽 모두를 신속하게 변경할 수 있기 때문에 테스트 데이터베이스를 이용해서 한창 개발이 진행 중인 초기에 매우 편리합니다.\
* 그러나 데이터베이스에 존재하던 기존 데이터가 모두 사라지므로, 절대로 운영 데이터베이스에서는 사용하면 안된다는 단점이 있습니다!
* 2.
* 이니셜라이저를 이용해서 데이터베이스에 자동으로 테스트 데이터를 시드하면 생산적으로 응용 프로그램을 개발할 수 있습니다.
* 명시적으로 기존 데이터베이스의 스키마를 변경해서 모델 클래스와 일치시킬 수 있습니다.
* 이 방식의 장점은 기존 데이터를 그대로 유지할 수 있다는 것입니다.
* 직접 수작업으로 데이터베이스를 변경할 수도 있고 데이터베이스 변경 스크립트를 작성해서 필요한 작업을 수행할 수도 있습니다.
* 3.
* Code First 마이그레이션을 이용해서 데이터베이스의 스키마를 갱신할 수 있습니다.
* 
* 먼저 새로 추가된 컬럼에도 값을 제공할 수 있도록 SeedData 클래스를 수정
* 
* migrations add 명령은
* 마이그레이션 프레임워크에게 응용 프로그램의 현재 Movie 모델과 데이터베이스의 현재 Movie DB 스키마를 검토해서
* 데이터베이스를 새로운 모델로 마이그레이션 하는데 필요한 코드를 생성하도록 지시합니다.
* 
* https://docs.microsoft.com/ko-kr/aspnet/core/tutorials/first-mvc-app/new-field?view=aspnetcore-2.1
* 1. 도구 메뉴에서 NuGet 패키지 관리자 > 패키지 관리자 콘솔을 선택
* 2. 다음 명령을 입력합니다.
* 3. Add-Migration Rating
*    Update-Database
* Add-Migration 명령은 마이그레이션 프레임워크에서 현재 Movie DB 스키마로 현재 Movie 모델을 검사하고 DB를 새 모델로 마이그레이션하는 데 필요한 코드를 만들도록 합니다.
* "Rating" 이름은 임의로 지정되며 마이그레이션 파일의 이름을 지정하는 데 사용됩니다. 마이그레이션 파일에 의미 있는 이름을 사용하는 것이 좋습니다.
* 
* Data/Migrations/ 폴더에 Migration 에 대한 마이그레이션 파일이 생성됨!!!!!!!!!!!!
* 
* DB의 모든 레코드를 삭제하는 경우 이니셜라이저에서 DB를 시드하고 Rating 필드를 포함합니다. 브라우저 또는 SSOX에서 삭제 링크를 사용하여 이를 수행할 수 있습니다.
* */

유효성 검사 어트리뷰트를 추가하는 작업 역시 모델 클래스를 변경하는 행위이므로,
이전 파트에서처럼 응용 프로그램을 실행하기 전에 먼저 마이그레이션 작업을 수행해주는 것이 보다 올바른 작업 방식입니다.
그러면 각각의 속성들에 적용된 어트리뷰트의 규칙들이 적절한 형태로 데이터베이스 테이블에 반영되는데,
가령 Rating 컬럼의 데이터 형식 같은 경우는 nvarchar(5)로 변경됩니다.
--> PM> Add-Migration [새로운 이름] <-- Data/Migrations/ 폴더에 Migration 에 대한 마이그레이션 파일이 생성
--> PM> Update-Database             <-- 생성된 Migration을 실행! 이때 Database의 해당 테이블의 데이터 형식도 변경되게 됨!

###################################################
###### 생성된 Migration 파일을 꼭 살펴볼것!! ######
###################################################

폼이 자동으로 유효하지 않은 값이 입력된 각 필드에 적절한 유효성 검사 오류 메시지를 렌더하는 것을 확인할 수 있습니다.
이 오류들은 클라이언트 측과 (JavaScript와 jQuery를 이용해서) 서버 측 (사용자가 JavaScript를 비활성화시킨 경우) 모두에서 발생하게 됩니다.

이 방식의 가장 중요한 장점은 유효성 검사 UI를 활성화시키기 위해서 MoviesController 클래스나 Create.cshtml 뷰의 코드를 단 한줄도 변경할 필요가 없다는 점입니다.
심지어 본 자습서 시리즈의 이전 파트들을 통해서 만들었던 모든 컨트롤러와 뷰들도 본문에서 유효성 검사 어트리뷰트로 Movie 모델 클래스의 속성들에 지정한 유효성 검사 규칙들을 자동으로 인식합니다.
가령 Edit 액션 메서드의 유효성 검사 기능을 테스트해보면 어떠한 추가 작업을 하지 않았음에도 동일한 유효성 검사 기능이 적용됨을 확인할 수 있습니다.